#include libr.h
#include stdio.h
#include string.h
#include stdlib.h
#include conio.h
#pragma warning(disable4996) 

void not_robot() 매크로 방지
{
	char confirm[6];
	srand((unsigned)time(NULL));
	char human[6];
	int n;
	for(n=0;n5;n++)
	{
		for (int i = 0; i  5; i++)
		{
			if (i == 3  i == 1)
			{
				confirm[i] = rand() % 26 + 65;
			}
			else if (i == 2  i == 0)
			{
				confirm[i] = rand() % 10 + 48;
			}
			else if (i == 4)
			{
				confirm[i] = rand() % 26 + 97;
			}
		}
		confirm[5] = '0';
		printf(로봇이 아닙니다%sn, confirm);
		gets(human);
		if (strcmp(human, confirm) == 0)
		{
			printf(확인되었습니다.n);
			break;
		}
	}
	if (n == 5) {
		printf(입력한도를 초과하였습니다.);
		exit(1);
	}
}

void star(char star[]) 비밀번호 입력시 ''로 나오게 처리. getch와 conio 헤더 파일이 필요.
{

	for (int i = 0;;)
	{
		int c;
		c = getch();
		if (c == 13)
		{
			star[i] = '0';
			break;
		}
		else if (c == 8)
		{

			if (i = 1)
			{
				printf(b);
				fputs( , stdout);
				i--;
				printf(b);
			}
			else if (i  1)
			{

			}
			continue;
		}
		star[i] = c;
		putchar('');
		i++;
	}
	printf(n);
}

void p_change(char user[]) 비밀번호 변경
{
	int n;
	FILE fA;
	char pirth;
	char fileA;
	char ex_p;
	char pass;
	pirth= (char)malloc(sizeof(char)10);
	fileA= (char)malloc(sizeof(char)100);
	ex_p= (char)malloc(sizeof(char)100);
	pass= (char)malloc(sizeof(char)20);
	printf(생년월일을 입력해주세요.);
	star(pirth);
	strcpy(fileA, Cpw);
	strcat(fileA, user);
	strcat(fileA, -);
	strcat(fileA, pirth);
	strcat(fileA, .txt);
	fA = fopen(fileA, r);
	if (fA == NULL)
	{
		fprintf(stderr, 정보가 올바르지 않습니다.);
		n = 0;
	}
	else
	{
		while (1)
		{
			if (feof(fA))
			{
				break;
			}
			fgets(ex_p, 100, fA);
		}
		n = 1;
		fclose(fA);
	}
	if (n == 1)
	{
		printf(바꿀 );
		pw(pass);
		if (strcmp(pass, ex_p) == 0)
		{
			printf(비밀번호가 기존과 일치합니다.n);
		}
		else {
			fA = fopen(fileA, w);
			fprintf(fA, %s, pass);
			fclose(fA);
			strcpy(fileA, Cid);
			strcat(fileA, user);
			strcat(fileA, .txt);
			FILE fB;
			fB= fopen(fileA, w);
			p_cpy(pass);
			fprintf(fB, %s, pass);
			fclose(fB);
			printf(변경이 완료되었습니다.n);
		}
	}
	free(pirth);
	free(fileA);
	free(ex_p);
	free(pass);
}

void p_cpy(char p[])  특정 문자열을 암호화해서 내보냄.
{
	char asc;
	asc = (char)malloc(sizeof(char)  100);
	for (int i = 0; i = strlen(p); i++)
	{
		int c;
		if (i == strlen(p))
		{
			asc[i] = '0';
			break;
		}
		c = p[i];
		if (c = 48 & c = 57)
		{
			c += 32;
		}
		else if (c = 65 & c = 78)
		{
			c -= 28;
		}
		else if (c = 79 && c = 90)
		{
			c += 25;
		}
		else if (c = 97 && c = 109)
		{
			c -= 30;
		}
		else if (c = 110 && c = 122)
		{
			c -= 59;
		}
		else if (c = 37 && c = 47)
		{
			c += 75;
		}
		else if (c = 58 && c = 63)
		{
			c += 32;
		}
		asc[i] = c;
	}
	strcpy(p, asc);
	free(asc);
}

void p_star(char pstar[]) 특정 문자를 암호화 한 뒤 ''로 출력함.
{

	for (int i = 0;;)
	{
		int c;
		c = getch();
		if (c == 13)
		{
			pstar[i] = '0';
			break;
		}
		else if (c == 8)
		{

			if (i = 1)
			{
				printf(b);
				fputs( , stdout);
				i--;
				printf(b);
			}
			else if (i  1)
			{

			}
			continue;
		}
		else if (c = 37 && c = 47) {
			c += 75;
		}
		else if (c = 48 && c = 57) {
			c += 32;
		}
		else if (c = 58 && c = 63) {
			c += 32;
		}
		else if (c = 65 && c = 78) {
			c -= 28;
		}
		else if (c = 79 && c = 90) {
			c += 25;
		}
		else if (c = 97 && c = 109) {
			c -= 30;
		}
		else if (c = 110 && c = 122) {
			c -= 59;
		}
		pstar[i] = c;
		putchar('');
		i++;
	}
	printf(n);
}